version: '3'
services:
    app:
        build:
            context: '.'
            dockerfile: ./runtime/${BUILD_RUNTIME:-8.1}/Dockerfile
            args:
                DOCKER_DIR: runtime/${BUILD_RUNTIME:-8.1}
                PROJECT_DIR: './workspace/backend'
                NODE_VERSION: 18
        image: diamondicq/marketplace2
        container_name: marketplace2-core
        restart: unless-stopped
        ports:
            - "${FORWARD_PHP_FPM_PORT:-9000}:9000"
        tty: true
        volumes:
            - 'marketplace2-backend:/var/www/html'
        networks:
            - marketplace2
        depends_on:
            - mariadb
    supervisor:
        build:
            context: '.'
            dockerfile: ./runtime/${BUILD_RUNTIME:-8.1}/supervisor.Dockerfile
            args:
                DOCKER_DIR: runtime/${BUILD_RUNTIME:-8.1}
                PROJECT_DIR: './workspace/backend'
                NODE_VERSION: 18
        image: diamondicq/worker
        container_name: marketplace2-worker
        restart: unless-stopped
        environment:
            YARN_DEV_ONSTART: ${YARN_DEV_ONSTART:-true}
            YARN_DEV_RESTART: ${YARN_DEV_RESTART:-true}
            SCHEDULE_WORKER_ONSTART: ${SCHEDULE_WORKER_ONSTART:-true}
            SCHEDULE_WORKER_RESTART: ${SCHEDULE_WORKER_RESTART:-true}
            QUEUE_WORKER_ONSTART: ${QUEUE_WORKER_ONSTART:-true}
            QUEUE_WORKER_RESTART: ${QUEUE_WORKER_RESTART:-true}
            HORIZON_ONSTART: ${HORIZON_ONSTART:-true}
            HORIZON_RESTART: ${HORIZON_RESTART:-true}
        volumes:
            - 'marketplace2-backend:/var/www/html'
        networks:
            - marketplace2
        depends_on:
            - app
    nginx:
        image: nginx:stable-alpine
        container_name: marketplace2-engine
        tty: true
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.nginx.rule=HostRegexp(`{catchall:.*}`) && PathPrefix(`/`) && !Host(`${TRAEFIK_DASH}`)"
            # HTTP Scheme
            - "traefik.http.routers.nginx.entrypoints=web"
            - "traefik.http.routers.nginx.tls=false"
            # HTTPS Scheme
            # - "traefik.http.routers.nginx.entrypoints=websecure"
            # - "traefik.http.routers.nginx.tls=true"
            # - "traefik.http.routers.nginx.tls.certresolver=default"
            # - "traefik.http.routers.nginx.middlewares=redirect-to-https"
            # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
            # - traefik.http.routers.nginx.tls.domains[0].main=${APP_HOST}
            # - traefik.http.routers.nginx.tls.domains[0].sans=*.${APP_HOST}
            # Portainer
            - "traefik.http.routers.nginx.middlewares=portainer-prefix"
            - "traefik.http.middlewares.portainer-prefix.stripprefix.prefixes=/"
            - "traefik.http.middlewares.portainer-prefix.stripprefix.forceslash=false"
        volumes:
            - ./runtime/${BUILD_RUNTIME:-8.1}/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - 'marketplace2-backend:/var/www/html'
        depends_on:
            - traefik
            - app
        networks:
            - marketplace2
    traefik:
        image: traefik:v2.10
        container_name: marketplace2-reverse-proxy
        restart: always
        ports:
            - "${FORWARD_TRAEFIK_PORT:-80}:80"
            # For HTTPS Scheme
            # - "${FORWARD_TRAEFIK_WEBSECURE_PORT:-443}:443"
            - "${FORWARD_TRAEFIK_DASH_PORT:-8080}:8080"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`${TRAEFIK_DASH}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
            - "traefik.http.routers.api.service=api@internal"
            # HTTP Scheme
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.routers.api.tls=false"
            # HTTPS Scheme
            # - "traefik.http.routers.api.entrypoints=websecure"
            # - "traefik.http.routers.api.tls=true"
            # - "traefik.http.routers.api.tls.certresolver=default"
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck', '--ping']
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            # For HTTP Scheme
            - ./runtime/${BUILD_RUNTIME:-8.1}/traefik.yml:/traefik.yml
            # For HTTPS Scheme
            # - ./runtime/${BUILD_RUNTIME:-8.1}/traefik.secure.yml:/traefik.yml
            - "/var/run/docker.sock:/var/run/docker.sock"
            - ./letsencrypt:/letsencrypt
        networks:
            - marketplace2
    mariadb:
        image: 'mariadb:11'
        container_name: marketplace2-db
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
            MYSQL_ROOT_HOST: "%"
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'marketplace2-mariadb:/var/lib/mysql'
            - './scripts/mysql/create_testing_database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
            - ./runtime/${BUILD_RUNTIME:-8.1}/mariadb/my.cnf:/etc/mysql/mariadb.conf.d/10-custom-conf.cnf:ro
        networks:
            - marketplace2
        healthcheck:
            test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
            interval: 10s
            retries: 3
            timeout: 5s
    redis:
        image: redis:alpine
        container_name: marketplace2-redis
        ports:
            - "${FORWARD_REDIS_PORT:-6379}:6379"
        volumes:
            - "marketplace2-redis:/data"
        networks:
            - marketplace2
    memcached:
        image: memcached:alpine
        container_name: marketplace2-memcached
        ports:
            - "11211:11211"
        networks:
            - marketplace2
    elasticsearch:
        image: elasticsearch:7.17.8
        container_name: marketplace2-elasticsearch
        environment:
            - xpack.security.enabled=false
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        volumes:
            - marketplace2-elasticsearch:/var/lib/elasticsearch/data
        ports:
            - "${FORWARD_ELASTICSEARCH_PORT:-7700}:7700"
        networks:
            - marketplace2
    # This can be used to test AWS S3 OR S3 Compatible Storage Drivers locally
    minio:
        image: 'minio/minio:latest'
        container_name: marketplace2-minio
        ports:
            - '${FORWARD_MINIO_PORT:-9000}:9000'
            - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.minio.rule=Host(`${APP_HOST}`) && PathPrefix(`/`) && !Host(`${TRAEFIK_DASH}`)"
            # HTTP Scheme
            - "traefik.http.routers.minio.entrypoints=web"
            - "traefik.http.routers.minio.tls=false"
            # Portainer
            - "traefik.http.routers.minio.middlewares=portainer-prefix"
            - "traefik.http.middlewares.portainer-prefix.stripprefix.prefixes=/"
            - "traefik.http.middlewares.portainer-prefix.stripprefix.forceslash=false"
        volumes:
            - 'marketplace2-minio:/data/minio'
        networks:
            - marketplace2
        command: minio server /data/minio --console-address ":8900"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 10s
            retries: 3
            timeout: 5s
    mailhog:
        image: 'mailhog/mailhog:latest'
        container_name: marketplace2-mailhog
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - marketplace2
networks:
    marketplace2:
        driver: bridge
volumes:
    marketplace2-mariadb:
        driver: local
    marketplace2-minio:
        driver: local
    marketplace2-redis:
        driver: local
    marketplace2-elasticsearch:
        driver: local
    marketplace2-backend:
        driver: local
        driver_opts:
          type: 'none'
          o: 'bind'
          device: './workspace/backend'
